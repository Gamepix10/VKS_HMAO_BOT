from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.api import APIClient
from database.db_manager import get_user

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    query = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
@router.message(F.text == "/search")
async def search_start(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user or not user.get("token"):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ email —É—á–∞—Å—Ç–Ω–∏–∫–∞):")
    await state.set_state(SearchStates.query)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞
@router.message(SearchStates.query)
async def search_query(message: Message, state: FSMContext):
    query = message.text.strip()
    user = await get_user(message.from_user.id)
    if not user or not user.get("token"):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    try:
        client = APIClient(token=user["token"])
        results = client.search_vks(query)

        if not results:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        else:
            response = "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n\n"
            for meeting in results:
                response += (
                    f"üîπ **{meeting['title']}**\n"
                    f"üìÜ –î–∞—Ç–∞: {meeting['date']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {meeting['time']}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(meeting['participants'])}\n"
                    f"ID: {meeting['id']}\n\n"
                )
            await message.answer(response)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
    finally:
        await state.clear()

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –í–ö–° —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@router.message(F.text == "/filter")
async def filter_start(message: Message):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ", callback_data="filter:date"),
        InlineKeyboardButton("–ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data="filter:participants"),
        InlineKeyboardButton("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="filter:title"),
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
@router.callback_query(F.data.startswith("filter:"))
async def filter_select(callback: CallbackQuery):
    criterion = callback.data.split(":")[1]

    if criterion == "date":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        await callback.answer()

    elif criterion == "participants":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:")
        await callback.answer()

    elif criterion == "title":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:")
        await callback.answer()


