from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.api import APIClient
from database.db_manager import get_user

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –í–ö–°
class ScheduleStates(StatesGroup):
    title = State()
    date = State()
    time = State()
    participants = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –í–ö–°
@router.message(F.text == "/vks")
async def list_vks(message: Message):
    user = await get_user(message.from_user.id)
    if not user or not user.get("token"):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    try:
        client = APIClient(token=user["token"])
        meetings = client.get_vks()

        if not meetings:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
            return

        response = "üìÖ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:**\n\n"
        for meeting in meetings:
            response += (
                f"üîπ **{meeting['title']}**\n"
                f"üìÜ –î–∞—Ç–∞: {meeting['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {meeting['time']}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(meeting['participants'])}\n"
                f"ID: {meeting['id']}\n\n"
            )
        await message.answer(response)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ö–°
@router.message(F.text == "/create_vks")
async def create_vks_start(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user or not user.get("token"):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    await state.set_state(ScheduleStates.title)

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
@router.message(ScheduleStates.title)
async def set_vks_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD):")
    await state.set_state(ScheduleStates.date)

# –í–≤–æ–¥ –¥–∞—Ç—ã –≤—Å—Ç—Ä–µ—á–∏
@router.message(ScheduleStates.date)
async def set_vks_date(message: Message, state: FSMContext):
    date = message.text.strip()
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    await state.update_data(date=date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):")
    await state.set_state(ScheduleStates.time)

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏
@router.message(ScheduleStates.time)
async def set_vks_time(message: Message, state: FSMContext):
    time = message.text.strip()
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.update_data(time=time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (email):")
    await state.set_state(ScheduleStates.participants)

# –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –í–ö–°
@router.message(ScheduleStates.participants)
async def set_vks_participants(message: Message, state: FSMContext):
    participants = [p.strip() for p in message.text.split(",")]
    data = await state.get_data()

    user = await get_user(message.from_user.id)
    if not user or not user.get("token"):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    try:
        client = APIClient(token=user["token"])
        client.create_vks(
            title=data["title"],
            date=data["date"],
            time=data["time"],
            participants=participants,
        )
        await message.answer("–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {str(e)}")
    finally:
        await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
@router.message(F.text.startswith("/delete_vks "))
async def delete_vks(message: Message):
    user = await get_user(message.from_user.id)
    if not user or not user.get("token"):
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ /start.")
        return

    meeting_id = message.text.split()[1]
    try:
        client = APIClient(token=user["token"])
        client.delete_vks(meeting_id)
        await message.answer("–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {str(e)}")
