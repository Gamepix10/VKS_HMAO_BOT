import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config import TELEGRAM_TOKEN
from api_client import APIClient
from keyboards import get_main_menu
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
api_client = APIClient()

def get_action_menu_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton(text="–õ–æ–≥–∏–Ω", callback_data="login")]
        ]
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_welcome_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next_step")]
        ]
    )
    return keyboard

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start (–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω)
async def cmd_start(message: Message):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n"
        "üìÖ –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n"
        "- –£–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏\n\n"
        "–ù–∞–∂–º–∏—Ç–µ **'–î–∞–ª–µ–µ'**, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    await message.answer(text, reply_markup=get_welcome_keyboard(), parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" (–Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞)
async def next_step(call: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()

    # –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
    await call.message.answer(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! üòä\n\n"
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_action_menu_keyboard())



# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
#async def cmd_start(message: Message):
#√ü    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –í–ö–°! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_auth_choice_keyboard())

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /login
async def cmd_login(call: CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: `email@example.com password`", parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
async def cmd_register(call: CallbackQuery):
    await call.message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: `email@example.com password`.", parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–Ω–∞
async def process_login(message: Message):
    try:
        email, password = message.text.split(" ")
        if api_client.login(email, password):
            await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=get_main_menu())
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `email@example.com password`", parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def process_register(message: Message):
    try:
        email, password = message.text.split(" ")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration_response = api_client.register(email, password)
        if registration_response.get("id"):
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `email@example.com password`", parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –í–ö–°
async def upcoming_vcs(call: CallbackQuery):
    vcs_list = api_client.get_vcs({"status": "upcoming"})
    if vcs_list:
        response = "\n\n".join([f"{vcs['title']} - {vcs['date']} ({vcs['organizer']})" for vcs in vcs_list])
    else:
        response = "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –í–ö–°."
    await call.message.answer(response)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –í–ö–°
async def create_vcs(call: CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –í–ö–° –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ù–∞–∑–≤–∞–Ω–∏–µ, –ú–µ—Å—Ç–æ, 2023-12-25 15:00, 2 —á–∞—Å–∞, participant1@example.com, participant2@example.com`", parse_mode="Markdown")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –í–ö–°
async def process_create_vcs(message: Message):
    try:
        data = message.text.split(", ")
        new_vcs = {
            "title": data[0],
            "location": data[1],
            "start_time": data[2],
            "duration": data[3],
            "participants": data[4:]
        }
        response = api_client.create_vcs(new_vcs)
        if response.get("id"):
            await message.answer(f"–í–ö–° —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –°—Å—ã–ª–∫–∞: {response.get('link')}")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ö–°.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n/help - –ü–æ–º–æ—â—å")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
dp.message.register(cmd_start, Command("start"))
dp.callback_query.register(cmd_login, lambda call: call.data == "login")
dp.callback_query.register(cmd_register, lambda call: call.data == "register")
dp.message.register(process_login)
dp.callback_query.register(next_step, lambda call: call.data == "next_step")
dp.message.register(process_register)
dp.callback_query.register(upcoming_vcs, lambda call: call.data == "upcoming")
dp.callback_query.register(create_vcs, lambda call: call.data == "create")
dp.message.register(process_create_vcs, lambda message: "," in message.text)
dp.message.register(help_command, Command("help"))

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
